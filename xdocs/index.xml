<?xml version="1.0" encoding="UTF-8"?>

<document>

    <properties>
        <title>JXTA Bridge</title>
        <author email="burton@openprivacy.org">JXTA-BRIDGE Documentation Team</author>
    </properties>

    <body>

        <section name="What is JXTA Bridge?">

            <p>
                The JXTA SOAP Bridge project is designed to allow SOAP
                communication over the JXTA P2P network.
            </p>

            <p>
                The design goals of SOAP integrated with the JXTA platform are
                very attractive.

                <ol>

                    <li>
                        You can now use JXTA for discovery and transport without
                        having to worry about building in protocol style
                        interaction for your services. 
                    </li>

                    <li>
                        You can use SOAP encodings, faults, etc over the JXTA
                        network.

                    </li>

                    <li>
                        JXTA services from different parties can now interact
                        easier without having to worry about protocol level
                        details.
                    </li>

                    <li>
                        Services you build for JXTA can also be deployed over
                        other networks.  HTTP, SMTP, etc
                    </li>
                    
                </ol>

            </p>

            <p>
                Bridge was created by <a href="http://relativity.yi.org">Kevin
                Burton</a> as a component of the larger <a
                href="http://reptile.openprivacy.org">Reptile</a> project. 
                Bridge will drive all JXTA interaction within Reptile.
            </p>
            
        </section>

        <section name="Web services and JXTA integration points">

            <p>
                The Bridge package also provides an integration point between
                JXTA P2P networks and web services running on conventional
                networks (HTTP, BEEP, etc).  The same code can be uses as a JXTA
                P2P service and a conventional web service.
            </p>

            <p>
                <img src="lifecycle-thumb.png" border="1"/>
            </p>
            
        </section>

        <section name="Using Bridge in your applications">

            <subsection name="Service">

                <ol>
                    <li>
                        Create a <b>ServiceDescriptor</b> to represent your
                        service.  This should probably be a DESCRIPTOR member in
                        your service class.
                    </li>

                    <li>
                        Tell the service what PeerGroup it belongs to.
                    </li>
                    
                    <li>
                        Create a new SOAPService from that ServiceDescriptor.
                    </li>

                    <li>
                        Call the init() method with the service descriptor.
                    </li>

                    <li>
                        Create a new thread that calls accept on the service.
                    </li>

                </ol>

                <p>
                    <b>Example:</b>

                </p>
                
<source><![CDATA[
ServiceDescriptor descriptor = HelloService.DESCRIPTOR;

service.getRunData().setPeerGroup( group );
    
service.init( descriptor );
    
new ServiceThread( service ).start();        
]]></source>
                    
            </subsection>
            
            <subsection name="Client">

                <ol>
                
                    <li>Create a ServiceDescriptor (identical to the server)</li>

                    <li>Join the correct peergroup(s), use discovery to find the
                        correct ServiceDescriptor to use.
                    </li>

                    <li>
                        Use CallFactory get a Call from this ServiceDesciptor
                    </li>

                    <li>
                        Specify the method to call and invoke()
                    </li>

                </ol>
                        
                <p>
                    <b>Example:</b>

                </p>

<source><![CDATA[
Call call = CallFactory.getInstance().createCall( descriptor,
                                                  advertisement,
                                                  peergroup );

call.setOperationName( new QName( descriptor.getName(), "sayHello" ) );
call.setTimeout( new Integer( 10000 ) );

String res = (String)call.invoke( new Object[] { "Hey JXTA peer!" } );
]]></source>

            </subsection>

            <subsection name="Automatic PeerGroup joining">

                <p>

                    Bridge supports automatically joining and creating
                    peergroups for your application.  You just need to specify
                    the ID to use.  You should also make sure that your
                    PeerGroup in your RunData is null.
                    
                </p>

<source><![CDATA[
descriptor.setPeerGroupID( "urn:jxta:uuid-393F58BDA78E409E9D7B868B054D535002" );
]]></source>

            </subsection>
            
            <subsection name="Example Service">

                <p>
                    Bridge includes an example service:
                </p>
                
                <p>
                    <a href="javadoc/net/jxta/soap/jxta/examples/HelloService.html">
                        <img src="jase/png/net.jxta.soap.examples.HelloService.png" border="0" align="center"/>
                    </a>
                </p>

            </subsection>
            
        </section>

        <section name="JXTA service communication">

            <p>
                When deploying a JXTA service, we create the necessary
                peergroups, service/pipe advertisements, etc.  We then create a
                Service instance (potentially as a new Thread).

            </p>
            
            <p>
                <a href="javadoc/net/jxta/soap/jxta/SOAPService.html">
                    <img src="jase/png/net.jxta.soap.jxta.SOAPService.png" border="0" align="center"/>
                </a>
            </p>

            <p>
                The service class listens for messages on its input pipe,
                accepts these messages, creates a bidirectional pipe between the
                remote client peer, invokes the method on the given service, and
                then returns the result to the client.
            </p>

        </section>

        <section name="Web service communication">

            <p>
                Deploying a your code as a SOAP Service is left up to the user.
                You can deploy the same code by following the Axis instructions
                for doing so.
            </p>

        </section>

        <section name="Invoking methods on JXTA services">

            <p>

                Your application needs to do normal JXTA discovery.  Once you
                are certain which peer you want to run a Call against you just
                call <b>CallFactory.getInstance()..createCall()</b> with the
                correct ServiceDescriptor, PipeAdvertisement and PeerGroup.  You
                need to specify the method you want to call and parameters.
                Everything else is like a normal SOAP service.
                
            </p>

            <p>
                You do need to make sure that the remote peer you are contacting
                actually is running the Bridge with SOAP and the required
                service.  If you did your discovery correctly this should
                probably work.
            </p>
            
        </section>
            
        <section name="TODO">

            <li>
                Make sure <a href="http://www.w3.org/TR/SOAP-dsig/">XML
                Signature works over SOAP</a>
            </li>
            
        </section>

        <section name="Links">

            <li><a href="http://ezel.jxta.org">EZEL</a></li>
            
            <li><a href="http://www.w3.org/TR/SOAP/">SOAP 1.1 protocol</a></li>

            <li><a href="http://xml.apache.org/axis">Apache AXis</a></li>

        </section>
    </body>

</document>

